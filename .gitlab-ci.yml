stages:
  - e2e

variables:
  RUN_E2E_TEST:
    description: "set RUN_E2E_TEST to 'true' if you want to trigger the e2e test on your pipeline."

e2e:
  stage: e2e
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^mq-working-branch-/'
      changes:
        paths:
          - charts/datadog/*.yaml
          - test/**/*
        compare_to: "refs/heads/main"
      when: always
    - if: '$CI_COMMIT_BRANCH =~ /^mq-working-branch-/'
      when: never
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        paths:
          - charts/datadog/**
          - test/**/*
        compare_to: "refs/heads/main"
      when: always
    - if: $RUN_E2E_TEST == "true"
      when: manual
    - when: never
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/test-infra-definitions/runner:$TEST_INFRA_DEFINITIONS_BUILDIMAGES
  tags: ["arch:amd64"]
  variables:
    TEST_INFRA_DEFINITIONS_BUILDIMAGES: d7d0c8db9c87
    E2E_AWS_PUBLIC_KEY_PATH: /tmp/agent-qa-ssh-key.pub
    E2E_AWS_PRIVATE_KEY_PATH: /tmp/agent-qa-ssh-key
    E2E_GCP_PUBLIC_KEY_PATH: /tmp/agent-qa-gcp-ssh-key.pub
    E2E_GCP_PRIVATE_KEY_PATH: /tmp/agent-qa-gcp-ssh-key
    E2E_KEY_PAIR_NAME: ci.helm-charts
    KUBERNETES_MEMORY_REQUEST: 12Gi
    KUBERNETES_MEMORY_LIMIT: 16Gi
  before_script:
    # Setup AWS Credentials
    - echo "Starting setup for E2E testing..."
    - mkdir -p ~/.aws
    - set -x
    - aws ssm get-parameter --region us-east-1 --name ci.helm-charts.agent-qa-profile --with-decryption --query "Parameter.Value" --out text >> ~/.aws/config
    - export AWS_PROFILE=agent-qa-ci

    # Configure AWS profile
    - set -x
    - aws ssm get-parameter --region us-east-1 --name ci.helm-charts.ssh_public_key --with-decryption --query "Parameter.Value" --out text > $E2E_AWS_PUBLIC_KEY_PATH
    - aws ssm get-parameter --region us-east-1 --name ci.helm-charts.ssh_private_key --with-decryption --query "Parameter.Value" --out text > $E2E_AWS_PRIVATE_KEY_PATH

    # Use S3 backend to store stack status
    - export PULUMI_CONFIG_PASSPHRASE=$(aws ssm get-parameter --region us-east-1 --name ci.helm-charts.pulumi_password --with-decryption --query "Parameter.Value" --out text)
    - pulumi login "s3://dd-pulumi-state?region=us-east-1&awssdk=v2&profile=$AWS_PROFILE"

    # Set GITHUB_TOKEN to avoid getting rate-limited when pulumi sdk downloads the kubernetes provider
    - export GITHUB_TOKEN=$(aws ssm get-parameter --region us-east-1 --name ci.helm-charts.github_token --with-decryption --query "Parameter.Value" --out text)

    # SSH Key retrieval for GCP
    - set -x
    - aws ssm get-parameter --region us-east-1 --name ci.helm-charts.ssh_private_key --with-decryption --query "Parameter.Value" --out text > $E2E_GCP_PUBLIC_KEY_PATH || exit $?
    - touch $E2E_GCP_PRIVATE_KEY_PATH && chmod 600 $E2E_GCP_PRIVATE_KEY_PATH && aws ssm get-parameter --region us-east-1 --name ci.helm-charts.ssh_private_key --with-decryption --query "Parameter.Value" --out text > $E2E_GCP_PRIVATE_KEY_PATH || exit $?
    - export E2E_GCP_PRIVATE_KEY_PASSWORD=$(aws ssm get-parameter --region us-east-1 --name ci.helm-charts.ssh_private_key_password --with-decryption --query "Parameter.Value" --out text)

    # Setup GCP credentials. https://www.pulumi.com/registry/packages/gcp/installation-configuration/
    # The service account is called `agent-e2e-tests`
    - set -x
    - aws ssm get-parameter --region us-east-1 --name ci.helm-charts.e2e_tests_gcp_credentials --with-decryption --query "Parameter.Value" --out text  > ~/gcp-credentials.json || exit $?
    - export GOOGLE_APPLICATION_CREDENTIALS=~/gcp-credentials.json

  script:
    - E2E_PROFILE=ci make test-e2e
