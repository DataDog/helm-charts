---
# Source: datadog/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: datadog
  namespace: datadog-agent
  labels:
    helm.sh/chart: 'datadog-3.91.0'
    app.kubernetes.io/name: "datadog"
    app.kubernetes.io/instance: "datadog"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7"
    app.kubernetes.io/component: agent
    env.datadoghq.com/kind: gke-gdc
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: datadog
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "datadog"
        app.kubernetes.io/instance: "datadog"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: agent
        admission.datadoghq.com/enabled: "false"
        app: datadog
        env.datadoghq.com/kind: gke-gdc
      name: datadog
      annotations:
        checksum/clusteragent_token: 3e4b1c117cad7e2f7b738e53441d937bef3462845797739348ac420bcc8cefbf
        checksum/install_info: d99057d2f27261db48a091cf5b114431385f7e656a0b4575b81b9ade7b02583d
        checksum/autoconf-config: 74234e98afe7498fb5daf1f36ac2d78acc339464f950703b8c019892f982b90b
        checksum/confd-config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/checksd-config: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    spec:
      
      securityContext:
        runAsUser: 0
      containers:
      - name: agent
        image: "gcr.io/datadoghq/agent:7.62.0"
        imagePullPolicy: IfNotPresent
        command: ["agent", "run"]
        
        resources:
          {}
        ports:
        - containerPort: 8125
          name: dogstatsdport
          protocol: UDP
        env:
          - name: DD_API_KEY
            valueFrom:
              secretKeyRef:
                name: "datadog-secret"
                key: api-key
          - name: DD_REMOTE_CONFIGURATION_ENABLED
            value: "false"
          - name: DD_AUTH_TOKEN_FILE_PATH
            value: /etc/datadog-agent/auth/token
          
          - name: KUBERNETES
            value: "yes"
          - name: DD_KUBELET_CLIENT_CRT
            value: /certs/tls.crt
          - name: DD_KUBELET_CLIENT_KEY
            value: /certs/tls.key
          - name: DD_LANGUAGE_DETECTION_ENABLED
            value: "false"
          - name: DD_LANGUAGE_DETECTION_REPORTING_ENABLED
            value: "false"
          - name: DD_KUBERNETES_KUBELET_HOST
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: DD_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: DD_HOSTNAME
            value: "$(DD_NODE_NAME)-$(DD_CLUSTER_NAME)"
          - name: DD_OTLP_CONFIG_LOGS_ENABLED
            value: "false"
          - name: DD_PROVIDER_KIND
            value: gke-gdc
          
          
          - name: DD_LOG_LEVEL
            value: "INFO"
          - name: DD_DOGSTATSD_PORT
            value: "8125"
          - name: DD_DOGSTATSD_NON_LOCAL_TRAFFIC
            value: "true"
          - name: DD_DOGSTATSD_TAG_CARDINALITY
            value: "low"
          - name: DD_CLUSTER_AGENT_ENABLED
            value: "true"
          - name: DD_CLUSTER_AGENT_KUBERNETES_SERVICE_NAME
            value: datadog-cluster-agent
          - name: DD_CLUSTER_AGENT_AUTH_TOKEN
            valueFrom:
              secretKeyRef:
                  name: datadog-cluster-agent
                  key: token
          - name: DD_APM_ENABLED
            value: "false"
          - name: DD_LOGS_ENABLED
            value: "true"
          - name: DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL
            value: "true"
          - name: DD_LOGS_CONFIG_K8S_CONTAINER_USE_FILE
            value: "true"
          - name: DD_LOGS_CONFIG_AUTO_MULTI_LINE_DETECTION
            value: "true"
          - name: DD_HEALTH_PORT
            value: "5555"
          - name: DD_EXTRA_CONFIG_PROVIDERS
            value: "clusterchecks endpointschecks"
          - name: DD_IGNORE_AUTOCONF
            value: "kubernetes_state"
          - name: DD_CONTAINER_LIFECYCLE_ENABLED
            value: "true"  
          - name: DD_ORCHESTRATOR_EXPLORER_ENABLED
            value: "true"
          - name: DD_EXPVAR_PORT
            value: "6000"
          - name: DD_COMPLIANCE_CONFIG_ENABLED
            value: "false"
          - name: DD_CONTAINER_IMAGE_ENABLED
            value: "true"
          - name: DD_KUBELET_CORE_CHECK_ENABLED
            value: "true"        
        volumeMounts:
          - name: logdatadog
            mountPath: /var/log/datadog
            readOnly: false # Need RW to write logs
          - name: installinfo
            subPath: install_info
            mountPath: /etc/datadog-agent/install_info
            readOnly: true
          - name: tmpdir
            mountPath: /tmp
            readOnly: false # Need RW to write to /tmp directory
          
          - name: config
            mountPath: /etc/datadog-agent
            readOnly: false # Need RW to mount to config path
          - name: auth-token
            mountPath: /etc/datadog-agent/auth
            readOnly: false # Need RW to write auth token
          
          
          - name: pointerdir
            mountPath: /opt/datadog-agent/run
            mountPropagation: None
            readOnly: false # Need RW for logs pointer
          - name: logpodpath
            mountPath: /var/log/pods
            mountPropagation: None
            readOnly: true
          - name: logscontainerspath
            mountPath: /var/log/containers
            mountPropagation: None
            readOnly: true
          - name: kubelet-cert-volume
            mountPath: /certs
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /live
            port: 5555
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /ready
            port: 5555
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 5
        startupProbe:
          failureThreshold: 6
          httpGet:
            path: /startup
            port: 5555
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 5
      initContainers:
      - name: init-volume  
        image: "gcr.io/datadoghq/agent:7.62.0"
        imagePullPolicy: IfNotPresent
        command: ["bash", "-c"]
        args:
          - cp -r /etc/datadog-agent /opt
        volumeMounts:
          - name: config
            mountPath: /opt/datadog-agent
            readOnly: false # Need RW for config path
        resources:
          {}
      - name: init-config  
        image: "gcr.io/datadoghq/agent:7.62.0"
        imagePullPolicy: IfNotPresent
        command:
          - bash
          - -c
        args:
          - for script in $(find /etc/cont-init.d/ -type f -name '*.sh' | sort) ; do bash $script ; done
        volumeMounts:
          - name: config
            mountPath: /etc/datadog-agent
            readOnly: false # Need RW for config path
        env:
          - name: DD_API_KEY
            valueFrom:
              secretKeyRef:
                name: "datadog-secret"
                key: api-key
          - name: DD_REMOTE_CONFIGURATION_ENABLED
            value: "false"
          - name: DD_AUTH_TOKEN_FILE_PATH
            value: /etc/datadog-agent/auth/token
          
          - name: KUBERNETES
            value: "yes"
          - name: DD_KUBELET_CLIENT_CRT
            value: /certs/tls.crt
          - name: DD_KUBELET_CLIENT_KEY
            value: /certs/tls.key
          - name: DD_LANGUAGE_DETECTION_ENABLED
            value: "false"
          - name: DD_LANGUAGE_DETECTION_REPORTING_ENABLED
            value: "false"
          - name: DD_KUBERNETES_KUBELET_HOST
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: DD_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: DD_HOSTNAME
            value: "$(DD_NODE_NAME)-$(DD_CLUSTER_NAME)"
          - name: DD_OTLP_CONFIG_LOGS_ENABLED
            value: "false"
          - name: DD_PROVIDER_KIND
            value: gke-gdc
        resources:
          {}
      volumes:
      - name: auth-token
        emptyDir: {}
      - name: installinfo
        configMap:
          name: datadog-installinfo
      - name: config
        emptyDir: {}
        
      - name: logdatadog
        emptyDir: {}
      - name: tmpdir
        emptyDir: {}
      - name: s6-run
        emptyDir: {}
      - hostPath:
          path: /var/datadog/logs
        name: pointerdir
      - hostPath:
          path: /var/log/pods
        name: logpodpath
      - hostPath:
          path: /var/log/containers
        name: logscontainerspath
      - secret:
          secretName: datadog-kubelet-cert
        name: kubelet-cert-volume
      tolerations:
      affinity:
        {}
      serviceAccountName: "datadog"
      automountServiceAccountToken: true
      nodeSelector:
        kubernetes.io/os: linux
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 10%
    type: RollingUpdate