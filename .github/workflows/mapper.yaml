name: Helm to Operator Mapper

on:
  pull_request:
    paths:
      - "charts/datadog/values.yaml" 
      # run only when values.yaml is updated

# Permission forced by repo-level setting; only elevate on job-level
permissions:
  contents: read

jobs:
# check that mapper was updated
  check-mapper-update:
    name: Check if Mapping File is Updated
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236 # v4.7.1
        with:
          python-version: 3.12

      - name: Install dependencies
        run: pip install pyyaml

      - name: Compare values.yaml with mapping file
        run: |
          python <<EOF
          import yaml
          import sys

          def flatten_dict(d, parent_key="", sep="."):
              """Recursively flattens a nested dictionary."""
              items = []
              for k, v in d.items():
                  new_key = f"{parent_key}{sep}{k}" if parent_key else k
                  if isinstance(v, dict):
                      items.extend(flatten_dict(v, new_key, sep=sep).items())
                  else:
                      items.append((new_key, v))
              return dict(items)

          values_file = "charts/datadog/values.yaml"
          mapping_file = "tools/yaml-mapper/mapping_datadog_helm_to_datadogagent_crd.yaml"

          with open(values_file, "r") as vf, open(mapping_file, "r") as mf:
              values_data = yaml.safe_load(vf) or {}
              mapping_data = yaml.safe_load(mf) or {}

          # Flatten values.yaml structure
          flattened_values = flatten_dict(values_data)

          # Extract keys from the mapping file
          mapping_keys = set(mapping_data.keys())

          # Compare missing keys
          missing_keys = [key for key in flattened_values.keys() if key not in mapping_keys]

          if missing_keys:
              print("The following keys are missing in the mapping file:")
              for key in missing_keys:
                  print(f"- {key}")
              sys.exit(1)
          else:
              print("Mapper file is correctly updated!")
          EOF