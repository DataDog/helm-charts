# Datadog Private Action Runner

{{ template "chart.versionBadge" . }}{{ template "chart.appVersionBadge" . }}

This Helm Chart deploys the Datadog Private Action runner inside a Kubernetes cluster. It allows you to use private actions from the Datadog Workflow and Datadog App Builder products. When deploying this chart, you can give permissions to the runner in order to be able to run Kubernetes actions.

## How to use Datadog Helm repository

You need to add this repository to your Helm repositories:

```
helm repo add datadog https://helm.datadoghq.com
helm repo update
```

## Requirements
* `kubectl` CLI is installed on my machine
* Helm is installed on my machine
* The permissions of my Kubernetes environment allow the Datadog Private Action Runner to read and write using a Kubernetes service account

## Use this chart
1. Go to the [Private Action Runner tab](https://app.datadoghq.com/workflow/private-action-runners).
2. Create a new Private Action Runner and follow the instructions for Kubernetes.

## Use this chart with connection credentials
1. Go to the [Private Action Runner tab](https://app.datadoghq.com/workflow/private-action-runners).
2. Create a new Private Action Runner and follow the instructions for Kubernetes.
3. Configure [connection credentials](https://docs.datadoghq.com/service_management/workflows/private_actions/private_action_credentials) for the selected private actions via `values.yaml`.

## To use Kubernetes actions
1. Go to the [Workflow connections page](https://app.datadoghq.com/workflow/connections).
2. Create a new connection, select your private action runner, and use **Service account authentication**.
3. Enable the actions you want in the Chart values using `kubernetesActions` (see [the example file](examples/values.yaml)).
4. Create a new workflow and use a Kubernetes action like **List pod** or **List deployment**.

## Going further
* Learn more about [Kubernetes RBAC](https://kubernetes.io/docs/reference/access-authn-authz/rbac).
* Deploy several runners with different permissions or create different connections according to your needs.
* Learn more about [Private actions](https://docs.datadoghq.com/service_management/app_builder/private_actions).

### Use a kubernetes secret to store the runner's identity

If you want to store the runner's identity outside of the Helm chart, you can create a kubernetes secret and use it in the `values.yaml` file.
```bash
# Create a secret with runner's private key and urn
kubectl create secret generic <secret-name> --from-literal RUNNER_URN=<CHANGE_ME_URN_FROM_CONFIG> --from-literal RUNNER_PRIVATE_KEY=<CHANGE_ME_PRIVATE_KEY_FROM_CONFIG>
# Alternatively you can only store the private key in the secret and keep the URN in the values.yaml
kubectl create secret generic <secret-name>  --from-literal RUNNER_PRIVATE_KEY=<CHANGE_ME_PRIVATE_KEY_FROM_CONFIG>
```
Update the `values.yaml` file with the secret name
```yaml
runner:
  # ... other fields
  runnerIdentitySecret: <secret-name>
  # ... other fields
  config:
    # you can get rid of the values in `config`, the secret will take precedence
    # urn: "STORED_IN_A_SECRET"
    # privateKey: "STORED_IN_A_SECRET"
```

### Use kubernetes secrets to store credentials

If you want to store the credentials outside of the Helm chart, you can create a kubernetes secret and use it in the `values.yaml` file.
```bash
# Create a secret with the credentials files
kubectl create secret generic <secret-name> --from-literal jenkins_token.json='{"auth_type": "Token Auth", "credentials": [{"tokenName": "username", "tokenValue": "USERNAME"}, {"tokenName": "token", "tokenValue": "TOKEN"}, {"tokenName": "domain", "tokenValue": "DOMAIN" }]}' --from-literal gitlab_token.json='{"auth_type": "Token Auth", "credentials": [{"tokenName": "baseURL", "tokenValue": "GITLAB_BASE_URL"}, {"tokenName": "gitlabApiToken", "tokenValue": "GITLAB_API_TOKEN"}]}'

# Alternatively create one secret per credentials file
kubectl create secret generic <secret-name-jenkins> --from-literal jenkins_token.json='{"auth_type": "Token Auth", "credentials": [{"tokenName": "username", "tokenValue": "USERNAME"}, {"tokenName": "token", "tokenValue": "TOKEN"}, {"tokenName": "domain", "tokenValue": "DOMAIN" }]}'
kubectl create secret generic <secret-name-gitlab> --from-literal gitlab_token.json='{"auth_type": "Token Auth", "credentials": [{"tokenName": "baseURL", "tokenValue": "GITLAB_BASE_URL"}, {"tokenName": "gitlabApiToken", "tokenValue": "GITLAB_API_TOKEN"}]}'
```

Update the `values.yaml` file with the secrets names and the directory names
```yaml
runner:
  credentialSecrets:
    # your credentials files will be located at /etc/dd-action-runner/credentials/jenkins_token.json and /etc/dd-action-runner/credentials/gitlab_token.json
    - secretName: <secret-name>
      directoryName: ""
    # your credentials file will be located at /etc/dd-action-runner/credentials/jenkins/jenkins_token.json
    - secretName: <secret-name-jenkins>
      directoryName: "jenkins"
    # your credentials file will be located at /etc/dd-action-runner/credentials/gitlab/gitlab_token.json
    - secretName: <secret-name-gitlab>
      directoryName: "gitlab"
```


{{ template "chart.valuesSection" . }}
