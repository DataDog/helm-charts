apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "datadog-csi-driver.daemonsetName" . }}
  namespace: {{ .Release.Namespace }}
  {{- if (eq (include "csi.gke-autopilot-workloadallowlists-enabled" .) "true") }}
  labels:
    cloud.google.com/matching-allowlist: "datadog-datadog-csi-driver-daemonset-exemption-v1.0.1"
  {{- end }}
spec:
  selector:
    matchLabels:
      app: {{ include "datadog-csi-driver.daemonsetName" . }}
  template:
    metadata:
      labels:
        app: {{ include "datadog-csi-driver.daemonsetName" . }}
        admission.datadoghq.com/enabled: "false"
    spec:
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
    {{ toYaml .Values.image.pullSecrets | indent 8 }}
      {{- end }}
      containers:
        - name: csi-node-driver
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            privileged: true 
          ports:
            - containerPort: 5000
              protocol: TCP 
          args:
            - --apm-host-socket-path={{ .Values.sockets.apmHostSocketPath }}
            - --dsd-host-socket-path={{ .Values.sockets.dsdHostSocketPath }}
          volumeMounts:
            # plugin-dir stores the socket on which CSI node server service is exposed.
            # it is created by the node server and needs to be writeable.
            - name: plugin-dir
              mountPath: /csi
            - name: apm-socket
              mountPath: {{ (dir .Values.sockets.apmHostSocketPath) }}
              readOnly: true
            {{- if ne (dir .Values.sockets.dsdHostSocketPath) (dir .Values.sockets.apmHostSocketPath) }}
            - name: dsd-socket
              mountPath: {{ (dir .Values.sockets.dsdHostSocketPath) }}
              readOnly: true
            {{- end }}
            # write mode is required to perform a volume mount
            # csi driver has to create a subdirectory under /var/lib/kubelet/pods/<pod-uid>/volumes/kubernetes.io~csi/datadog/mount. 
            - mountPath: /var/lib/kubelet/pods
              mountPropagation: Bidirectional
              name: mountpoint-dir
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
        - name: csi-node-driver-registrar
          image: "{{ .Values.registrar.image.repository }}:{{ .Values.registrar.image.tag }}"
          imagePullPolicy: {{ .Values.registrar.image.pullPolicy }}
          args:
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: /var/lib/kubelet/plugins/datadog.csi/driver/csi.sock
          volumeMounts:
            # plugin-dir stores the socket created by the CSI driver node server.
            # it is needed by the registrar to fetch the driver name from the driver contain (via the CSI GetPluginInfo() call).
            - name: plugin-dir
              mountPath: /csi # Match this to ADDRESS
              readOnly: true
            # registration-dir is used to store the registration information and register the driver with kubelet.
            # it needs to be writeable
            - name: registration-dir
              mountPath: /registration # This is where the registrar writes the registration information
      volumes:
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/datadog.csi/driver
            type: DirectoryOrCreate
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry
            type: Directory
        - hostPath:
            path: /var/lib/kubelet/pods
            type: DirectoryOrCreate
          name: mountpoint-dir
        - hostPath:
            path: {{ dir .Values.sockets.apmHostSocketPath }}
            type: DirectoryOrCreate
          name: apm-socket
        - hostPath:
            path: {{ dir .Values.sockets.dsdHostSocketPath }}
            type: DirectoryOrCreate
          name: dsd-socket
