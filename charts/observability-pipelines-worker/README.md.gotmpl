# Observability Pipelines Worker

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}{{ template "chart.appVersionBadge" . }}

## How to use Datadog Helm repository

You need to add this repository to your Helm repositories:

```
helm repo add datadog https://helm.datadoghq.com
helm repo update
```

{{ template "chart.requirementsSection" . }}

## Quick start

### Installing the Observability Pipelines Worker chart

To install the chart with the release name `<RELEASE_NAME>` run:

```bash
helm install --name <RELEASE_NAME> \
  --set datadog.apiKey=<DD_API_KEY> \
  --set datadog.configKey=<DD_OP_CONFIG_KEY> \
  datadog/observability-pipelines-worker
```

By default, this chart creates secrets for your Observability Pipelines API and configuration keys. However, you can use
manually created Secrets by setting the `datadog.apiKeyExistingSecret` and/or `datadog.appKeyExistingSecret` values
(see [Creating a Secret](#create-and-provide-a-secret-that-contains-your-datadog-api-and-configuration-keys), below).

**Note:** When creating the Secret(s), be sure to name the key fields `api-key` and `config-key`.

After a few minutes, you should see your new pipeline active in Datadog.

**Note:** You can set your [Datadog site](https://docs.datadoghq.com/getting_started/site) using the `datadog.site` option.

```bash
helm install --name <RELEASE_NAME> \
    --set datadog.apiKey=<DD_API_KEY> \
    --set datadog.configKey=<DD_OP_CONFIG_KEY> \
    --set datadog.site=<DATADOG_SITE> \
    datadog/observability-pipelines-worker
```

#### Create and provide a Secret that contains your Datadog API and Configuration Keys

To create a Secret that contains your Datadog API key, replace the `<DATADOG_API_KEY>` below with the API key for your
organization. This Secret is used in the manifest to deploy the Observability Pipelines Worker.

```bash
export DATADOG_SECRET_NAME=datadog-secrets
kubectl create secret generic $DATADOG_SECRET_NAME \
    --from-literal api-key="<DD_API_KEY>" \
    --from-literal config-key="<DD_OP_CONFIG_KEY>"
```

**Note**: This creates a Secret in the **default** Namespace. If you are using a custom Namespace, update the Namespace
flag of the command before running it.

Now, the installation command contains a reference to the Secret.

```bash
helm install --name <RELEASE_NAME> \
  --set datadog.apiKeyExistingSecret=$DATADOG_SECRET_NAME \
  --set datadog.configKeyExistingSecret=$DATADOG_SECRET_NAME \
  datadog/observability-pipelines-worker
```

### Uninstalling the chart

To uninstall the `<RELEASE_NAME>` release:

```bash
helm delete <RELEASE_NAME>
```

The command removes all the Kubernetes components associated with the chart and deletes the release.

{{ template "chart.valuesSection" . }}
